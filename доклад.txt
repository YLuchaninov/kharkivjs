Специфика 


Идеальные случаи для использования ReactNative:
	- Надо быстро, наплевать на дизайн (если знаете реакт то быстрее не будет даже нативно)
	- Полностью стандартный UI, ничего кастомного
	- знакомы с Реактом и сопутствующими технологиями
	- последняя OS вы пишете вышла раньше чем 3 месяца назад
	
Идеальные случаи для использования PhoneGap:
	- Нестандартный UI/UX(отличающийся от нативного: презентации, партфолио, цифровые киоски, текст)
	- У Вас уже есть готовый SPA(осталось сделать респонсив или интегрировать нартивные фитчи: офлайн, камеру и т.д.)
	- Вы знаете JS и верстку, и Вам срочно надо опубликовать приложение в сторах чтобы максимально быстро выйти на рынок, и вам наплевать на быстродействие и баги
	- Вам нужны не только Android и iOS
	
Идеальные случаи для использования Titanium Mobile:
	- Вы писали на Titanium раньше
	- Ваше приложение требует доступа к особо хитрой нативной функциональности, а этой реализации нет не на одной из других платформ
	- я больше никаких случаев не знаю ...

Идеальные случаи для использования NativeScript:
	- Вам нужны уже существующие стороние нативные библиотеки
	- Вы готовы потратить чуть больше времени, но получить возможность использовать любые нативные особенности на полную катушку, и не готовы ждать нативщиков которые напишт Вам обертку или плагин
	- Вы понимаете что полного шаринга кода не существует
	- Вас не особо раздражает MVVM или Вы готовы учить Angular 2
	
Специфика PhoneGap:
	- браузеры есть везде, фонгап есть на 13 платформах, думмают над DesktopPhoneGap
	- совместим с огромным количеством других платформ (NW, Crosswalk, CocoonJS, Ludei ...)
	- приложение это просто SPA, на любом фреймверке
	- выполняется в мобильных браузерах (отсутствие оптимизированных UI библиотек с реализаций мобильного UI)
	- UX/UI будет именно такой который вы реализуете
	- самое большое комьюнити из рассматриваемых
	- нативные фитчи требуют нативной имплементации
	- практически не зависит от апдейтов OS
	
Специфика Titanium:
	- свой MVC фреймверк
	- не весь нативный функционал поддерживается
	- компилируемый нативный UI 
	- работа с нативным кодом через прокси классы
	- пропроритарная платформа, апдейт платформы производителем
	- постоянно меняется архитектура/подход, что приводит к багом, которые не успевают фиксить, наверное это причина - уже маленького комьюнити
	
Специфика ReactNative:
	- Flex layout
	- фабрика UI элементов
	- сериализация сообщений между V8 и нативным кодом, асинхронная работа, мигание как баг архитектуры 
	- React и сопутствующие технологии
	- "частичный" npm
	- пропроритарная платформа, апдейт платформы производителем
	
Специфика NativeScript:
	- прямая работа с ЛЮБЫМ нативным кодом, включая стороние библиотеки
	- работа в UI потоке
	- Reflection, апдейта платформы не требуется

